class Format {
  constructor({ひな型ID,管理用sheet,key列名,スプシ格納フォルダID,pdf格納フォルダID}){
    this.p = PropertiesService.getScriptProperties()
    this.ひな型ID = ひな型ID
    this.sheet = 管理用sheet
    const values = this.sheet.getDataRange().getValues()
    this.columns = values.shift();
    // 列名に'updatedAt',​'spreadsheetURL'​,'pdfID',​'pdfURL'があるかチェック
    ['updatedAt','spreadsheetURL','pdfID','pdfURL'].forEach(colName=>{
      if(!this.columns.includes(colName)){
        console.log(`${colName}がありません。列を付け加えてください`)
        throw null
      }
    })
    this.key列名= key列名? key列名:this.columns[0]

    this.items = values.map(row=>{
      return this.columns.reduce((item,colName,idx)=>{
        return Object.assign(item,{[colName]:row[idx]})
      },{})
    })        

    this.スプシ格納フォルダ = DriveApp.getFolderById(スプシ格納フォルダID)
    this.pdf格納フォルダ = DriveApp.getFolderById(pdf格納フォルダID)
  }

  get docs(){
    return this.items.reduce((docs,item)=>{
      return Object.assign(docs,{[item[this.key列名]]:item})
    },{})
  }

  _ひな型からインデックスを取り出し(){
    const ひな型values = SpreadsheetApp.openById(this.ひな型ID).getActiveSheet().getDataRange().getValues()
    let indexes = {'keyName':[0,0]}
    indexes = {}
    ひな型values.forEach((ひな型row,rowIdx)=>{
      ひな型row.forEach((ひな型value,colIdx)=>{
        if(/^<.+>$/.test(ひな型value)){
          const keyName = ひな型value.replace('<','').replace('>','')
          indexes[keyName]=[rowIdx,colIdx]
        }
      })
    })
    return indexes
  }

  _スプシフォーマットとデータの値に違いがあるか(data,spreadsheetURL){
    if(!spreadsheetURL)return true
    
    // スプシフォーマットから値を取得
    const スプシフォーマットvalues = SpreadsheetApp.openByUrl(spreadsheetURL).getDataRange().getValues()
    const indexes = this._ひな型からインデックスを取り出し()
    const スプシフォーマットitem = Object.entries(indexes).reduce((item,[key,[rowIdx,colIdx]])=>{
      return Object.assign(item,{[key]:スプシフォーマットvalues[rowIdx][colIdx]})
    },{})

    return Object.entries(スプシフォーマットitem).some(([key,スプシvalue])=>{
      // 管理表sheetに列名がないものはチェックを無視。
      if(!(key in data))return false
      return スプシvalue !== data[key]
    })
  }

  _スプシフォーマットからpdfを作成(spreadsheetURL){
    const スプシフォーマット = SpreadsheetApp.openByUrl(spreadsheetURL)
    const newPdfBlob = スプシフォーマット.getAs('application/pdf')
    newPdfBlob.setName(newFileName||data[this.key列名])
    const newPdfFile = DriveApp.createFile(newPdfBlob)
    newPdfFile.moveTo(this.pdf格納フォルダ)
    return {pdfID:newPdfFile.getId(),pdfURL:newPdfFile.getUrl()}
  }

  _ひな型をコピーしてスプシフォーマットを作成(newFileName){
    return DriveApp
        .getFileById(this.ひな型ID)
        .makeCopy()
        .moveTo(this.スプシ格納フォルダ)
        .setName(newFileName||data[this.key列名])
        .getId()
  }

  _スプシフォーマットに値をセット(スプシフォーマットID){
    const スプシフォーマット = SpreadsheetApp.openById(スプシフォーマットID)
    const スプシフォーマットValues = スプシフォーマット.getActiveSheet().getDataRange().getValues()
    const indexes = this._ひな型からインデックスを取り出し()
    Object.entries(indexes).forEach(([key,[rowIdx,colIdx]])=>{
      スプシフォーマットValues[rowIdx][colIdx]=data[key]
    })
    スプシフォーマット.getActiveSheet().getDataRange().setValues(スプシフォーマットValues)
　　SpreadsheetApp.flush() // スプレッドシートの処理を終わらせないと、変数に値が入る前のスプレッドシートでpdfを作成してしまう    
  }

  データからスプシフォーマットの作成だけ実行(ID,data,newFileName){
    const スプシフォーマットID = this._ひな型をコピーしてスプシフォーマットを作成(newFileName)
    this._スプシフォーマットに値をセット(スプシフォーマットID,data)
  }

  スプシフォーマットからpdfを作成(spreadsheetURL){
    const {pdfID,pdfURL} = this._スプシフォーマットからpdfを作成(spreadsheetURL)
    
    // 管理表にupdatedAtやspreadsheetURLをセット
    const thisDataIndex = this.items.findIndex(item=>item.spreadsheetURL===spreadsheetURL)

    const self = this // これ書いとかないと、function内でclassを指すthisが使えない
    function setValueToColumn(columnName,value){
        self.sheet.getRange(
          thisDataIndex+2,
          self.columns.findIndex(colName=>colName===columnName)+1
        ).setValue(value)
    }    
    setValueToColumn('updatedAt',new Date())
    setValueToColumn('pdfID',pdfID)
    setValueToColumn('pdfURL',pdfURL)
  }


  データから書面作成(ID,data,newFileName){
    const {spreadsheetURL,pdfID} = this.docs[ID]
    
    // スプシフォーマットとデータの値に違いがなければ、処理は進めない
    if(!this._スプシフォーマットとデータの値に違いがあるか(data,spreadsheetURL)){
      console.log(ID,'差なし')
      return
    }

    // 古いスプシフォーマットは削除する
    if(spreadsheetURL){
      const oldスプシフォーマットID = SpreadsheetApp.openByUrl(spreadsheetURL).getId()
      DriveApp.getFileById(oldスプシフォーマットID).setTrashed(true)
    }
    if(pdfID){
      DriveApp.getFileById(pdfID).setTrashed(true)
    }

    // ひな型をコピーしてスプシフォーマットを作成
    const スプシフォーマットID = this._ひな型をコピーしてスプシフォーマットを作成()
    
    // スプシフォーマットに値をセット
    const スプシフォーマット = SpreadsheetApp.openById(スプシフォーマットID)
    const スプシフォーマットValues = スプシフォーマット.getActiveSheet().getDataRange().getValues()
    const indexes = this._ひな型からインデックスを取り出し()
    Object.entries(indexes).forEach(([key,[rowIdx,colIdx]])=>{
      スプシフォーマットValues[rowIdx][colIdx]=data[key]
    })
    スプシフォーマット.getActiveSheet().getDataRange().setValues(スプシフォーマットValues)
　　SpreadsheetApp.flush() // スプレッドシートの処理を終わらせないと、変数に値が入る前のスプレッドシートでpdfを作成してしまう

    // スプシフォーマットからpdfを作成
    const { pdfID:newPdfID, pdfURL} = this._スプシフォーマットからpdfを作成(spreadsheetURL)

    // 管理表にupdatedAtやspreadsheetURLをセット
    const thisDataIndex = this.items.findIndex(item=>item[this.key列名]===data[this.key列名])
    const self = this // これ書いとかないと、function内でclassを指すthisが使えない
    function setValueToColumn(columnName,value){
        self.sheet.getRange(
          thisDataIndex+2,
          self.columns.findIndex(colName=>colName===columnName)+1
        ).setValue(value)
    }    
    setValueToColumn('updatedAt',new Date())
    setValueToColumn('spreadsheetURL',スプシフォーマット.getUrl())
    setValueToColumn('pdfID',newPdfID)
    setValueToColumn('pdfURL',pdfURL)

    return {
      spreadsheetID:スプシフォーマット.getId(),
      pdfID:newPdfFile.getId()
    }
  }

}

